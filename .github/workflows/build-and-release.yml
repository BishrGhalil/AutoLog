name: Build & Release AutoLog

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests before build'
        required: false
        default: 'false'

permissions:
  contents: write   # needed for creating tags/releases

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Extract version from pyproject.toml
      - name: Read version
        id: get_version
        shell: bash
        run: |
          python - <<'EOF'
          import tomllib
          data = tomllib.load(open("pyproject.toml", "rb"))
          version = data.get("project", {}).get("version")
          if not version:
              raise SystemExit("Cannot find version in pyproject.toml")
          print(f"::set-output name=VERSION::{version}")
          EOF

      - name: Add SignTool to PATH
        uses: KamaranL/add-signtool-action@v1
        id: signtool

      # --- decode the PFX into a file ---
      - name: Restore code-signing certificate
        shell: bash
        run: |
          mkdir cert
          echo "${{ secrets.PFX_CERT }}" > cert/pfx.b64
          certutil -decode cert/pfx.b64 cert/code_sign.pfx

      # Placeholder for running tests
      # - name: Run tests
      #   run: pytest

      - name: Build executable
        run: |
          python -m pip install uv
          uv
          uv sync
          uv run pyinstaller --noconfirm --clean autolog.spec

      # --- sign the executable ---
      - name: Sign executable
        shell: pwsh
        env:
          SIGNTOOL_DIR: ${{ steps.signtool.outputs.signtool-x64 }}
          PFX_PASS: ${{ secrets.PFX_PASS }}
        run: |
          & "$env:SIGNTOOL_DIR\signtool.exe" sign /fd SHA256 /f cert\code_sign.pfx /p $env:PFX_PASS /tr http://timestamp.digicert.com /td SHA256 dist\AutoLog.exe

      # Create Git tag for this version
      - name: Tag version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v${{ steps.get_version.outputs.VERSION }}
          git push origin v${{ steps.get_version.outputs.VERSION }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          files: dist/AutoLog.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
