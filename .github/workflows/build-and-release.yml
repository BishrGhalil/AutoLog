name: Build & Release AutoLog

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests before build'
        required: false
        default: 'false'

permissions:
  contents: write   # needed for creating tags/releases

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Extract version from pyproject.toml
      - name: Read version
        id: get_version
        shell: bash
        run: |
          VERSION=$(python - <<'EOF'
          import tomllib
          data = tomllib.load(open("pyproject.toml", "rb"))
          version = data.get("project", {}).get("version")
          if not version:
              raise SystemExit("Cannot find version in pyproject.toml")
          print(version)
          EOF)

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
       # Extract just the matching section from CHANGELOG.md
      - name: Extract changelog for v${{ steps.get_version.outputs.VERSION }}
        id: extract_changelog
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          awk -v v="$VERSION" '
            /^##[[:space:]]*v?'"$VERSION"'[[:space:]]*\(/ { p = 1 }
            p && /^##[[:space:]]*[vV]?[0-9]/ && !/^##[[:space:]]*v?'"$VERSION"'[[:space:]]*\(/ { exit }
            p { print }
          ' CHANGELOG.md > release_notes.md

      # Placeholder for running tests
      # - name: Run tests
      #   run: pytest

      - name: Build executable
        run: |
          python -m pip install uv
          uv
          uv sync
          uv run pyinstaller --noconfirm --clean autolog.spec

      # --- sign the executable ---
      - name: Code-sign artifacts
        uses: skymatic/code-sign-action@v1
        with:
          certificate:    ${{ secrets.PFX_CERT }}    # base64-encoded .pfx
          password:       ${{ secrets.PFX_PASS }}
          certificatesha1: ${{ secrets.CERTHASH }}   # to ensure the cert matches
          description:    'AutoLog Windows App'
          timestampUrl:   'http://timestamp.digicert.com'
          folder:         'dist'                     # sign everything under dist/
          recursive:      true

      # create the GitHub Release, pointing at our extracted notes
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name:    v${{ steps.get_version.outputs.VERSION }}
          name:        Release v${{ steps.get_version.outputs.VERSION }}
          body_path:   release_notes.md
          files:       dist/AutoLog.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}